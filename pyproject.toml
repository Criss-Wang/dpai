[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[project]
authors = [{ name = "Zhenlin Wang (Criss)", email = "zhenlinw@cs.cmu.edu" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Intended Audience :: Developers",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Operating System :: Microsoft :: Windows",
  "License :: OSI Approved :: Apache Software License",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries",
]
dependencies = ["objprint>0.1.3"]
description = "ML Model Serving Package"
dynamic = ["version"]
license = { file = "LICENSE" }
name = "dpai"
readme = "README.md"
requires-python = ">=3.8"

[project.urls]
Documentation = "https://dpai.readthedocs.io"
Homepage = "https://github.com/criss-wang/dpai"

[project.scripts]
deploy = "dpai:main"

[tool.flake8]
exclude = [".git", "__pycache__"]
ignore = ['E231', 'E241', 'E501', "W503"]
extend-ignore = ['E203']
per_file_ignores = ['__init__.py:F401']
max-line-length = 127
statistics = true
count = true

[tool.setuptools.dynamic]
version = { attr = "dpai.__version__" }

[tool.pytest.ini_options]
addopts = ["--cov=src", "--cov-report=term-missing"]
filterwarnings = ["ignore::DeprecationWarning"]
testpaths = ["tests"]

[tool.mypy]
ignore_missing_imports = true
plugins = ["sqlalchemy.ext.mypy.plugin"]
# install_types = true
# check_untyped_defs = true
# disallow_any_generics = true
# no_implicit_optional = true
# no_implicit_reexport = true
# show_error_codes = true
# strict_equality = true
# warn_redundant_casts = true
# warn_return_any = true
# warn_unreachable = true
# warn_unused_configs = true

[tool.coverage.run]
branch = true
omit = ["main.py", "__*__.py"]


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"
